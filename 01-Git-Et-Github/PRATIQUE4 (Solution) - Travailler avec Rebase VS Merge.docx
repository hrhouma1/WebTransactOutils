----------------------
# Note et r√©f√©rences:
----------------------

- Ce tutoriel est bas√© sur les concepts expliqu√©s par Amit Prajapati dans son article original.
- https://medium.com/mindorks/understanding-git-merge-git-rebase-88e2afd42671


## Comprendre **Git Merge** et **Git Rebase**

### **Motivation d'aujourd'hui :**

*"Le progr√®s est impossible sans changement et ceux qui ne peuvent pas changer d'avis ne peuvent rien changer."*

Commen√ßons ! üòä

---

### **Quelle est l'utilit√© de `git merge` ?**

S√©parer les fonctionnalit√©s dans diff√©rentes branches est une pratique essentielle pour tout d√©veloppeur s√©rieux. En s√©parant chaque fonctionnalit√©, correction de bug, ou exp√©rimentation, vous √©viterez de nombreux probl√®mes et garderez vos branches de d√©veloppement propres.

√Ä un moment donn√©, une partie du code atteindra un √©tat o√π vous voudrez l'int√©grer avec le reste du projet. C'est l√† que la commande `git merge` entre en jeu.

---

### **Pr√©paration √† la fusion**

Supposons que vous voulez fusionner la branche `hotfix` dans votre branche `master`. Voici comment vous assurer que vous √™tes pr√™t √† effectuer cette fusion :

1. **Mettre √† jour votre d√©p√¥t local** : V√©rifiez si votre d√©p√¥t local est √† jour avec les derniers changements du serveur distant en utilisant `git fetch`.
2. **Passer √† la branche `master`** : Une fois la mise √† jour effectu√©e, faites un `git checkout master` pour vous assurer que vous travaillez sur la bonne branche.
3. **R√©cup√©rer les derni√®res mises √† jour** : Ex√©cutez `git pull` pour vous assurer que la branche `master` contient bien les derni√®res mises √† jour.
4. **Fusionner les branches** : Utilisez `git merge <nom_branche>` pour int√©grer les modifications de la branche `hotfix` dans `master`.

---

### **Fusion rapide (Fast-forward Merge)**

Une fusion rapide peut se produire lorsqu'il existe un chemin lin√©aire entre les branches que vous souhaitez fusionner. Si la branche `master` n'a pas diverg√©, au lieu de cr√©er un nouveau commit, Git fera simplement pointer la branche `master` vers le dernier commit de la branche `hotfix`.

### **Fusion √† trois voies (Three-way Merge)**

Lorsque les branches ont diverg√©, Git n'a pas d'autre choix que de combiner les branches via une fusion √† trois voies. Cette fusion utilise un commit suppl√©mentaire pour relier les deux branches.

---

### **Comment r√©soudre les conflits de fusion**

Un conflit de fusion se produit lorsque deux branches que vous essayez de fusionner ont modifi√© la m√™me partie du m√™me fichier. Git ne pourra pas d√©terminer quelle version utiliser. Voici comment r√©soudre un conflit de fusion :

1. **Ouvrir le fichier en conflit** : Lorsque vous essayez de fusionner les branches, Git marque les zones conflictuelles avec des indicateurs visuels :
   - `<<<<<<<` : Indicateur de d√©but de conflit.
   - `=======` : S√©pare vos changements de ceux de l'autre branche.
   - `>>>>>>>` : Indique la fin des lignes en conflit.

2. **R√©soudre le conflit manuellement** : D√©cidez si vous voulez conserver uniquement vos changements ou ceux de l'autre branche, ou bien √©crire du code enti√®rement nouveau. Ensuite, supprimez les marqueurs de conflit.

3. **Appliquer et committer les changements** : Apr√®s avoir r√©solu les conflits, utilisez `git add <fichier>` pour dire √† Git que les conflits sont r√©solus, puis cr√©ez un commit avec `git commit`.

---

### **Meilleure pratique avec `git rebase`**

L'objectif du **merge** et du **rebase** est le m√™me : prendre des commits d'une branche de fonctionnalit√© et les appliquer √† une autre branche. Cependant, le rebase permet de "rejouer" les commits d'une branche sur une autre, cr√©ant ainsi un historique plus lin√©aire.

---

### **La r√®gle d'or du rebase**

La r√®gle d'or du **rebase** est de **ne jamais l'utiliser sur des branches publiques**. En effet, le rebase r√©√©crit l'historique des commits, ce qui peut entra√Æner des divergences avec d'autres d√©veloppeurs travaillant sur les m√™mes branches.

---

### **Conclusion**

Dans ce tutoriel, nous avons couvert les notions essentielles de **Git merge** et **Git rebase**, ainsi que la gestion des conflits de fusion. Le merge est une mani√®re plus simple de combiner des branches, mais le rebase permet de maintenir un historique propre et lin√©aire. Assurez-vous de bien comprendre les diff√©rences entre ces deux approches avant de les utiliser dans vos projets.

Si vous avez trouv√© ce tutoriel utile, partagez-le et mettez-le en pratique dans vos projets pour mieux ma√Ætriser ces concepts.


